/*
Copyright 2018 The sample-crd Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by informer-gen

package v1

import (
	samplecrd_v1 "github.com/sample-crd/pkg/apis/samplecrd/v1"
	versioned "github.com/sample-crd/pkg/client/clientset/versioned"
	internalinterfaces "github.com/sample-crd/pkg/client/informers/externalversions/internalinterfaces"
	v1 "github.com/sample-crd/pkg/client/listers/samplecrd/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// SampleCRDInformer provides access to a shared informer and lister for
// SampleCRDs.
type SampleCRDInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.SampleCRDLister
}

type sampleCRDInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewSampleCRDInformer constructs a new informer for SampleCRD type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSampleCRDInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredSampleCRDInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredSampleCRDInformer constructs a new informer for SampleCRD type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSampleCRDInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SamplecrdV1().SampleCRDs(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SamplecrdV1().SampleCRDs(namespace).Watch(options)
			},
		},
		&samplecrd_v1.SampleCRD{},
		resyncPeriod,
		indexers,
	)
}

func (f *sampleCRDInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredSampleCRDInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *sampleCRDInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&samplecrd_v1.SampleCRD{}, f.defaultInformer)
}

func (f *sampleCRDInformer) Lister() v1.SampleCRDLister {
	return v1.NewSampleCRDLister(f.Informer().GetIndexer())
}
